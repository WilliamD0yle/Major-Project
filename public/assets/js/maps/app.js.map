{"version":3,"sources":["routes.js","account.js","addFood.js","cameraSearch.js","createAccount.js","customMeal.js","diary.js","foodContent.js","home.js","login.js","logout.js","mealfactory.js","progress.js","quickAdd.js","textSearch.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzprJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnnfile":"../app.js","sourcesContent":["'use strict';  \n/********************************\n Export the controller\n ********************************/\nvar app = angular.module('myApp', ['ngRoute', 'angularModalService','ui.bootstrap','chart.js']);\n\n//route configuration\napp.config(function ($routeProvider) {\n    //allows me to change the html for each page of the application in a single page. Keeps it a single page application\n    $routeProvider.\n    //root\n    when(\"/\", {\n        templateUrl: \"./views/home.html\",\n        controller: 'HomeController'\n    }).\n    //login page\n    when(\"/account/login\", {\n        templateUrl: \"./views/login.html\",\n        controller: 'LoginController'\n    }).\n    //Create Account page \n    when('/account/create', {\n        templateUrl: 'views/createAccount.html',\n        controller: 'CreateAccountController'\n    }).\n    //Create Account page\n    when('/account/logout', {\n        templateUrl: 'views/logout.html',\n        controller: 'LogOutController'\n    }).\n    //Diary page\n    when('/account/diary', {\n        templateUrl: 'views/diary.html',\n        controller: 'DiaryController'\n    }).\n    //Camera search page\n    when('/account/search', {\n        templateUrl: 'views/cameraSearch.html',\n        controller: 'SearchController'\n    }).\n    //Account page\n    when('/account/', {\n        templateUrl: 'views/account.html',\n        controller: 'AccountController'\n    }).\n    //Account textsearch\n    when('/account/textsearch', {\n        templateUrl: 'views/textSearch.html',\n        controller: 'TextSearchController'\n    }).\n    //Account custom meals page\n    when('/account/custom', {\n        templateUrl: 'views/custommeal.html',\n        controller: 'CustomMealController'\n    }).\n    //Breakdown of calories consumed page\n    when('/account/progress', {\n        templateUrl: 'views/progress.html',\n        controller: 'ProgressController'\n    }).\n    //Breakdown page\n    when('/test', {\n        templateUrl: 'views/cameraSearch.html',\n        controller: 'TestController'\n    }).\n    otherwise({\n        redirectTo: '/account/login'\n    });\n});","//Account controller\napp.controller('AccountController', function ($scope, $location, $http, Meal) {\n    \n    // get user details\n    $http({\n        method: 'GET',\n        url: '/account',\n    }).\n    success(function (response) {\n        if(!response){\n           $location.path('/account/login'); \n        }\n        $scope.user = response;\n        $scope.user.calories = response.calories;\n        if($scope.user.gender == \"male\"){\n            $scope.male = true;\n        }\n        else{\n            $scope.female = true;\n        }\n        \n    }).\n    error(function (response) {\n        console.log(response);\n        $location.path('/account/login');\n    });\n    \n    // used the calculation from - http://www.superskinnyme.com/calculate-tdee.html \n    // gives the new user the suggested amount for their daily calorie consumption\n    $scope.calculateCalories = function () {\n\n        //if the user selects female a female only calculation is used\n        if($scope.female == true){\n            $scope.user.calories = Math.ceil(655 + (9.6 * $scope.user.weight) + (1.8 * $scope.user.height) - (4.7 * $scope.user.age));\n        }\n        else {\n            $scope.user.calories = Math.ceil(66 + (13.7 * $scope.user.weight) + (5 * $scope.user.height) - (6.8 * $scope.user.age));\n        }\n    };\n    \n    //when the form is submitted the function is called\n    $scope.submitForm = function(){\n        //if the user selected male assign the value male\n        if($scope.male == true){\n            $scope.gender = \"male\";\n        }//if the user selected  female assign the value female\n        else{\n            $scope.gender = \"female\";\n        }\n        //use the HTTP request to post the information to the server\n        $http({\n            method: 'POST',\n            url: '/account/update',\n            data: {\n                'username': $scope.user.username,\n                'password': $scope.password,\n                'name': $scope.user.name,\n                'email': $scope.user.email,\n                'age': $scope.user.age,\n                'height': $scope.user.height,\n                'weight': $scope.user.weight,\n                'gender': $scope.gender,\n                'calories': $scope.user.calories\n            }\n        }).//if its a success the user is redirected to the diary page\n        success(function (response) {\n            alert(response);\n            $location.path('/account/diary');\n        }).\n        error(function (response) {\n            console.log(response);\n        });\n    };\n});","// add food modal controller\napp.controller('AddFoodController', function ($scope, $http, $route, $location, meal, food) {\n    // check if the food being added is an existing item or not\n    // this is done as this format of the json is slightly different\n    if(food[meal]){\n        $scope.item = food[meal].name;\n        $scope.brand = food[meal].brands;\n        $scope.carbs = food[meal].nutrients.carbs;\n        $scope.fats = food[meal].nutrients.fat;\n        $scope.protein = food[meal].nutrients.protein;\n        $scope.cals = food[meal].calories;\n        $scope.serving = Number(food[meal].servings);\n        $scope.image = food[meal].image;\n    }\n    else{\n        $scope.item = food.product_name;\n        $scope.brand = food.brands;\n        $scope.carbs = food.nutriments.carbohydrates;\n        $scope.fats = food.nutriments.fat;\n        $scope.protein = food.nutriments.proteins;\n        $scope.serving = food.serving_quantity;\n        $scope.cals = Math.ceil(food.nutriments.energy_serving);\n        $scope.image = food.image_front_small_url;\n    } \n    //work out the specific values for each nutrient by the users selected serving\n    $scope.lowestcal = $scope.cals / $scope.serving;\n    $scope.lowestcarbs = $scope.carbs / $scope.serving;\n    $scope.lowestfats = $scope.fats / $scope.serving;\n    $scope.lowestprotein = $scope.protein / $scope.serving;\n    $scope.totalCals = function () {\n        \n        if(!$scope.lowestcal){\n            console.log(\"not working\");\n            return \"No calorie information availible.\";\n        }\n        else{\n            return Math.ceil($scope.lowestcal * $scope.serving);\n        }\n    };\n    //work out the specific values for each nutrient by the users selected serving\n    $scope.totalCarbs = function () {\n        if(!$scope.lowestcal){\n            console.log(\"not working\");\n            return \"No carb information availible.\";\n        }\n        else{\n            return Math.ceil($scope.lowestcarbs * $scope.serving);\n        }\n    };\n    //work out the specific values for each nutrient by the users selected serving\n    $scope.totalFats = function () {\n        if(!$scope.lowestcal){\n            console.log(\"not working\");\n            return \"No fat information availible.\";\n        }\n        else{\n            return Math.ceil($scope.lowestfats * $scope.serving);\n        }\n    };\n    //work out the specific values for each nutrient by the users selected serving\n    $scope.totalProtein = function () {\n        if(!$scope.lowestcal){\n            console.log(\"not working\");\n            return \"No protein information availible.\";\n        }\n        else{\n            return Math.ceil($scope.lowestprotein * $scope.serving);\n        }\n    };\n    \n    //the meal type selected\n    $scope.meal = meal;\n    \n    //add cals sends the selected data to the server to then be added to the users food data for that day in the database\n    $scope.addCals = function () {\n        //create an object holding all the information\n        var diaryEntry = {[meal]: [{\"name\": $scope.item,\"brand\": $scope.brand,\"image\": $scope.image,\"calories\": $scope.totalCals(),\"servings\": $scope.serving,\"nutrients\": {\"fat\": $scope.totalFats(),\"carbs\": $scope.totalCarbs(),\"protein\": $scope.totalProtein()}}]};\n        console.log($scope.totalCals());\n        if(!$scope.lowestcal){\n            alert(\"Cannot add item with incomplete details, please select another item or use the quick add feature.\");\n        }\n        else{\n            //use a post method to send the data to the server\n            $http({\n                method: 'POST',\n                url: '/account/diary',\n                data: diaryEntry\n            }).\n            success(function (response) {\n                angular.element('body').removeClass('modal-open');\n                angular.element('div').removeClass('modal-backdrop');\n                $location.path('/account/diary');\n            }).\n            error(function (err) {\n                console.log(err);\n            });\n        }\n        \n    };\n    \n});","//Search controller\napp.controller('SearchController', function ($scope, $location, $http, $route, Meal, ModalService) {\n    var selectedMeal = {meal: Meal.Meal};\n    $scope.meal = selectedMeal.meal;\n    //redirect if the user isnt logged in\n    if(!$scope.meal){\n       $location.path('/');\n    }\n    //start the camera on desktop\n    var App = {\n        init: function () {\n            var self = this;\n\n            Quagga.init(this.state, function (err) {\n                if (err) {\n                    return self.handleError(err);\n                }\n                //Start the camera\n                Quagga.start();\n            });\n        },\n        handleError: function (err) {\n            //log the error\n            console.log(err);\n        },\n        initCameraSelection: function(){\n        var streamLabel = Quagga.CameraAccess.getActiveStreamLabel();\n\n        return Quagga.CameraAccess.enumerateVideoDevices().then(function(devices) {\n            function pruneText(text) {\n                return text.length > 30 ? text.substr(0, 30) : text;\n                }\n                var $deviceSelection = document.getElementById(\"deviceSelection\");\n                while ($deviceSelection.firstChild) {\n                    $deviceSelection.removeChild($deviceSelection.firstChild);\n                }\n                devices.forEach(function(device) {\n                    var $option = document.createElement(\"option\");\n                    $option.value = device.deviceId || device.id;\n                    $option.appendChild(document.createTextNode(pruneText(device.label || device.deviceId || device.id)));\n                    $option.selected = streamLabel === device.label;\n                    $deviceSelection.appendChild($option);\n                });\n            });\n        },\n        state: {\n            inputStream: {\n                name : \"Live\",\n                type : \"LiveStream\",\n                constraints: {\n                    //rare facing camera if availible \n                    facingMode: \"environment\"\n                },\n                area: { // defines rectangle of the detection/localization area\n                    top: \"0%\", // top offset\n                    right: \"0%\", // right offset\n                    left: \"0%\", // left offset\n                    bottom: \"0%\" // bottom offset\n                },\n                singleChannel: false // true: only the red color-channel is read\n            },\n            numOfWorkers: 4,\n            decoder: {\n                readers: [{ //type of barcode then will be read - ean is used for food and beverage products\n                    format: \"ean_reader\",\n                    config: {\n                        //supplements: ['ean_8_reader']\n                    }\n            }]\n            },\n            locate: true\n        }\n    };\n\n    App.init();\n\t// Create the QuaggaJS config object for the live stream\n    var liveStreamConfig = {\n\t\t\tinputStream: {\n\t\t\t\ttype : \"LiveStream\",\n\t\t\t\tconstraints: {\n\t\t\t\t\tfacingMode: \"environment\" // or \"user\" for the front camera\n\t\t\t\t}\n\t\t\t},\n\t\t\tlocator: {\n\t\t\t\tpatchSize: \"medium\",\n\t\t\t\thalfSample: true\n\t\t\t},\n\t\t\tnumOfWorkers: (navigator.hardwareConcurrency ? navigator.hardwareConcurrency : 4),\n\t\t\tdecoder: {\n\t\t\t\t\"readers\":[\n\t\t\t\t\t{\"format\":\"ean_reader\",\"config\":{}}\n\t\t\t\t]\n\t\t\t},\n\t\t\tlocate: true,\n\t\t};\n    \n\tvar fileConfig = $.extend({}, liveStreamConfig,{inputStream: {size: 800}});\n\t\n\t// Once a barcode had been read successfully, stop quagga\n\tQuagga.onDetected(function(result) {  \n\t\tif (result.codeResult.code){\n            Quagga.stop();\t\n            $scope.barcodeSearch(result.codeResult.code);\t\t\n\t\t}\n\t});\n\t// file input\n\t$(\".container input:file\").on(\"change\", function(e) {\n        Quagga.stop();\t\n\t\tif (e.target.files && e.target.files.length) {\n\t\t\tQuagga.decodeSingle($.extend({}, fileConfig, {src: URL.createObjectURL(e.target.files[0])}), function(result) {});\n\t\t}\n\t});\n    \n    $scope.barcodeSearch = function (barcode) {\n        var search = true;\n        var searchURL = \"https://world.openfoodfacts.org/api/v0/product/\" + barcode + \".json\";\n        if(search){\n            $http({\n            method: 'GET',\n            url: searchURL,\n            }).\n            success(function (response) {\n                if(response.product.complete == 0){\n                    alert(\"Product not found!\");  \n                    $location.path('/account/diary');\n                   }else{\n                    $scope.foodInformation(response.product);  \n                   }\n            }).\n            error(function (response) {\n                console.log(response);\n            });\n            search = false;\n        } \n    };\n    \n    $scope.foodInformation = function (food) {\n        ModalService.showModal({\n            templateUrl: './views/addfood.html',\n            controller: 'AddFoodController',\n            inputs: {\n                food: food,\n                meal: selectedMeal.meal\n            }\n        }).then(function (modal) {\n            modal.element.modal();\n        });\n    };\n\n});","//create account controller\napp.controller('CreateAccountController', function ($scope, $http, $location) {\n    $(\"#sidebar-toggle\").hide();\n    // used the calculation from - http://www.superskinnyme.com/calculate-tdee.html \n    // gives the new user the suggested amount for their daily calorie consumption\n    $scope.calculateCalories = function () {\n        //if the user selects female a female only calculation is used\n        if(Object.keys($scope.gender).toString() == \"female\"){\n            $scope.calories = Math.ceil(655 + (9.6 * $scope.newUser.weight) + (1.8 * $scope.newUser.height) - (4.7 * $scope.newUser.age));\n        }\n        else {\n            $scope.calories = Math.ceil(66 + (13.7 * $scope.newUser.weight) + (5 * $scope.newUser.height) - (6.8 * $scope.newUser.age));\n        }\n    };\n    \n    // Create account\n    $scope.submitForm = function () {\n        var gender = Object.keys($scope.gender).toString();\n        $http({\n            method: 'POST',\n            url: '/account/create',\n            data: {\n                'username': $scope.newUser.username,\n                'password': $scope.newUser.password,\n                'name': $scope.newUser.name,\n                'email': $scope.newUser.email,\n                'age': $scope.newUser.age,\n                'gender': gender,\n                'calories': $scope.calories\n            }\n        }).\n        success(function (response) {\n            alert(response);\n            $location.path('/');\n        }).\n        error(function (response) {\n            // When a string is returned\n            if (typeof response === 'string') {\n                alert(response);\n            }\n            // When array is returned\n            else if (Array.isArray(response)) {\n                // More than one message returned in the array\n                if (response.length > 1) {\n                    var messages = [],\n                        allMessages;\n                    for (var i = response.length - 1; i >= 0; i--) {\n                        messages.push(response[i]['msg']);\n                        if (response.length == 0) {\n                            allMessages = messages.join(\", \");\n                            alert(allMessages);\n                            console.error(response);\n                        }\n                    }\n                }\n                // Single message returned in the array\n                else {\n                    alert(response[0]['msg']);\n                    console.error(response);\n                }\n            }\n            // When something else is returned\n            else {\n                console.error(response);\n                alert(\"See console for error.\");\n            }\n        });\n    };\n});","//Custome meal controller\napp.controller('CustomMealController', function ($scope, $http, $route, $location, $timeout) {\n    \n    // get food that could be used to create a custom meal\n    $http({\n        method: 'GET',\n        url: '/account/diary'\n    }).\n    success(function (response) {\n        $scope.diary = response;\n    }).\n    error(function (response) {\n        $location.path('/account/diary');\n    });\n    \n    // get the current custom meals so the user can delete them if they so wish\n    //send get request to get the custom items for the users\n    $http({\n        method: 'GET',\n        url: '/account/custom',\n    }).\n    success(function (response) {\n        $scope.keys = [];\n        $scope.customMeals = response[0].customs;\n        for(var i = 0;i<$scope.customMeals.length;i++){\n            $scope.keys.push(Object.keys($scope.customMeals[i]));\n        }\n    }).\n    error(function (response) {\n        console.log(response);\n    });\n    \n    $scope.toggleClass = function (event){\n        $(event.target).toggleClass('added');\n    };\n    \n    //empty array that will hold the selected items\n    $scope.selectedFood = [];\n    \n    //function that adds the selected items to the array\n    $scope.addToSelected = function (meal, food) {\n        $scope.selectedFood.push({meal,food});\n    };    \n     \n    //function that fetches all the data for the meal\n    $scope.fetchFoodData = function () {\n            //empty array that will be used to format the returning items from the database for the custom meal\n            var mealItems = [];\n            if($scope.selectedFood != \"\"){\n                //loop over the selected meal names to get the specific info for each item\n                for (var i = 0; i < $scope.selectedFood.length; i++) {\n                    var mealtype = $scope.selectedFood[i].meal;\n                    $http({\n                        method: 'POST',\n                        url: '/account/food/info',\n                        data: $scope.selectedFood[i]\n                    }).success(function (response) {\n                        mealItems.push(response[mealtype]);  \n                    }).error(function (response) {\n                        console.log(response);\n                    });\n                };\n                $timeout(function () {\n                    $scope.sendFoodData(mealItems);\n                }, 250);\n        }else{\n            alert(\"Please add food items to create a custom meal!\");\n        }\n    }\n    //function that pushes the data to the server to be removed\n    $scope.removeCustom = function (meal) {\n        //sends the json data to the server\n        $http({\n            method: 'POST',\n            url: '/account/food/deletecustom',\n            data: meal\n        }).success(function (response) {\n            console.log(response);\n            $location.path('/account/diary');\n        }).error(function (response) {\n            console.log(response);\n        });\n    };  \n    \n    //function that pushes the data to the server\n    $scope.sendFoodData = function (items) {\n        //sends the json data to the server\n        $http({\n            method: 'POST',\n            url: '/account/food/custom',\n            data: {[$scope.name]:items}\n        }).success(function (response) {\n            alert($scope.name);\n            $location.path('/account/diary');\n        }).error(function (response) {\n            console.log(response);\n        });\n    };\n});","//Diary controller\napp.controller('DiaryController', function ($scope, $location, $http, $route, Meal, ModalService) {\n    \n    //get request that retrieves the users dairy for today\n    $http({\n        method: 'GET',\n        url: '/account/diary'\n    }).//assign the entries to the diary variable\n    success(function (response) {\n        console.log(response.breakfast);\n        $scope.diary = response;\n        //function that works out the total amount of calories\n        $scope.calculateCals(response);\n    }).\n    error(function (response) {\n        $location.path('/');\n    });\n\n    //calculate all the calories on the diary page\n    $scope.calculateCals = function (response) {\n        $scope.total = 0;\n        $scope.remaining = $scope.total - response.calories;\n        for(var key in response){\n            for(var x=0;x<response[key].length; x++){\n                if(response[key][x].calories){\n                    $scope.total = $scope.total + response[key][x].calories;\n                }\n            }  \n        } \n        $scope.remaining = response.calories - $scope.total;        \n    };\n    //set the meal type for the factory\n    $scope.mealSelected = function(selection){\n        Meal.update(selection);\n    }\n    //calls a function \n    $scope.foodInformation = function (chosenmeal, food) {\n        var meal = {meal: chosenmeal,food: food};\n        //http post request\n        $http({\n            method: 'POST',\n            url: '/account/food/info',\n            data: meal\n        }).success(function (response) {\n            ModalService.showModal({\n                templateUrl: './views/foodcontent.html',\n                controller: \"FoodContentController\",\n                inputs: {\n                    chosenMeal: chosenmeal,\n                    food: response\n                }\n            }).then(function (modal) {\n                modal.element.modal();\n            });\n        }).error(function (response) {\n            console.log(response);\n        });\n\n    };\n    //quick add calories \n    $scope.quickAdd = function (meal) {\n        console.log(meal);\n        ModalService.showModal({\n            templateUrl: './views/quickAddCals.html',\n            controller: \"QuickAddController\",\n            inputs: {\n                chosenMeal: meal\n            }\n        }).then(function (modal) {\n            modal.element.modal();\n        });\n    };\n});","app.controller('FoodContentController', function ($scope, $http, $route, chosenMeal, food) {\n    \n    $scope.chosenMeal = chosenMeal;\n    $scope.id = food[chosenMeal][0].id;\n    $scope.item = food[chosenMeal][0].name;\n    $scope.carbs = food[chosenMeal][0].nutrients.carbs;\n    $scope.fats = food[chosenMeal][0].nutrients.fat;\n    $scope.protein = food[chosenMeal][0].nutrients.protein;\n    $scope.cals = food[chosenMeal][0].calories;\n    $scope.serving = Number(food[chosenMeal][0].servings);\n    $scope.lowestcal = $scope.cals / $scope.serving;\n    $scope.lowestcarbs = $scope.carbs / $scope.serving;\n    $scope.lowestfats = $scope.fats / $scope.serving;\n    $scope.lowestprotein = $scope.protein / $scope.serving;\n\n    $scope.totalCals = function () {\n        return Math.ceil($scope.lowestcal * $scope.serving);\n    };\n\n    $scope.totalCarbs = function () {\n        return Math.ceil($scope.lowestcarbs * $scope.serving);\n    };\n\n    $scope.totalFats = function () {\n        return Math.ceil($scope.lowestfats * $scope.serving);\n\n    };\n\n    $scope.totalProtein = function () {\n        return Math.ceil($scope.lowestprotein * $scope.serving);\n    };\n    \n    //update the item  and send the details to the server\n    $scope.updateFood = function (item, serving, totalCals, carbs, fats, protein) {\n        \n        var meal = {meal: $scope.chosenMeal, food: item,id: $scope.id, serving: serving, totalCals: totalCals(), protein: protein, carbs: carbs, fats: fats};\n        console.log(meal);\n        $http({\n            method: 'POST',\n            url: '/account/food/update',\n            data: meal\n        }).\n        success(function (response) {\n//            $('.modal, .modal-backdrop, .modal-open').removeClass();\n            console.log(response);\n            $route.reload();\n        }).\n        error(function (response) {\n            console.log(response);\n        });\n    };\n    \n    //remove food from the diary page\n    $scope.removeFood = function () {\n\n        var meal = {meal: $scope.chosenMeal, id: $scope.id};\n\n        $http({\n            method: 'POST',\n            url: '/account/food/delete',\n            data: meal\n        }).\n        success(function (response) {\n            console.log(response);\n            $route.reload();\n        }).\n        error(function (response) {\n            console.log(response);\n        });\n    };\n});","//Home controller\napp.controller('HomeController', function ($scope, $location, $http) {\n    \t\n    $(\"#sidebar-toggle\").hide();\n    var screenWidth = $(window).width();\n    //if the width is greater than 700\n    if (screenWidth > 700){\n        $scope.login = true;    \n        $scope.loginPage = false;    \n    }else{\n        $scope.login = false;\n        $scope.loginPage = true; \n    }\n    \n    // Login submission\n    $scope.submitLogin = function () {\n        // Login request\n        $http({\n            method: 'POST',\n            url: '/account/login',\n            data: {\n                'username': $scope.loginForm.username,\n                'password': $scope.loginForm.password\n            }\n        }).\n        success(function (response) {\n            $(\"#sidebar-toggle\").show();\n            $location.path('/account/diary');\n        }).\n        error(function (err) {\n            alert(err + 'Login failed. Check username/password and try again.');\n        });\n    };\n    \n});","//login controller\napp.controller('LoginController', function ($scope, $location, $http) {\n    $(\"#sidebar-toggle\").hide();\n    // Login submission\n    $scope.submitLogin = function () {\n        // Login request\n        $http({\n            method: 'POST',\n            url: '/account/login',\n            data: {\n                'username': $scope.loginForm.username,\n                'password': $scope.loginForm.password\n            }\n        }).\n        success(function (response) {\n            $(\"#sidebar-toggle\").show();\n            $location.path('/account/diary');\n        }).\n        error(function (err) {\n            alert(err + 'Login failed. Check username/password and try again.');\n        });\n    };\n    // Redirect to account creation page\n    $scope.createAccount = function () {\n        $location.path('/account/create');\n    }\n});","//Logout controller\napp.controller('LogOutController', function ($scope, $location, $http, Meal) {\n    $(\"#sidebar-toggle\").hide();\n    // Logout function\n    $http({\n        method: 'GET',\n        url: '/account/logout',\n        xhrFields: {\n            withCredentials: true\n        }\n    }).\n    success(function (response) {\n        console.log(response);\n    }).\n    error(function (response) {\n        console.log(response);\n        $location.path('/account/login');\n    });\n\n});","// Create the factory that share the meal type to any controller\napp.factory('Meal', function () {\n    return {Meal: '',\n        update: function (meal) {\n            this.Meal = meal;\n        }\n    };\n});","//progress controller\napp.controller('ProgressController', function ($scope, $location, $http, $filter) {\n    \n    //get the diary information from the server\n    $http({\n        method: 'GET',\n        url: '/account/diary'\n    }).\n    success(function (response) {\n        //assign target the value of the users calories\n        $scope.target = response.calories;\n        $scope.progress();\n    }).//if theres an error redirect to the diary\n    error(function (response) {\n        $location.path('/');\n    });\n    \n    // get user info\n    $scope.progress = function(){\n        //get the full calorie information for this user from the server\n        $http({\n            method: 'GET',\n            url: '/account/progress',\n        }).\n        success(function (response) {\n            // creating arrays to hold graph data\n            $scope.cals = [];\n            $scope.targetCals = [];\n            $scope.monthlyTargetCals = [];\n            $scope.dailyTargetCals = [];\n            $scope.dates = [];\n            $scope.monthlyDates = [];\n            $scope.monthlyCals = [];\n            $scope.dailyDates = [];\n            $scope.dailyCals = [];\n            \n            //pattern to decode the date from the database\n            var pattern = /(\\d{4})(\\d{2})(\\d{2})/;\n            var monthNames = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n            \n            var d = new Date();\n            var thisMonth = monthNames[d.getMonth()];\n            var today = d.getDate();\n            Date.prototype.yyyymmdd = function() {\n              var mm = this.getMonth() + 1;\n              var dd = this.getDate();\n\n              return [this.getFullYear(),\n                      (mm>9 ? '' : '0') + mm,\n                      (dd>9 ? '' : '0') + dd\n                     ].join('');\n            };\n\n            var currentDate = new Date();\n\n            //loop over the information to sort into the correct arrays\n            for(var i=0;i<response.length;i++){\n                \n                var date = response[i].date + 100;\n                // all entris are shown for long term overview\n                $scope.cals.push(response[i].calories);\n                $scope.dates.push($filter('date')(new Date(date.toString().replace(pattern, '$1-$2-$3'))));\n                $scope.targetCals.push($scope.target);\n                \n                //if its in this month or the previous month\n                if(response[i].date + 100 >= currentDate.yyyymmdd() - 100){\n                    $scope.monthlyDates.push($filter('date')(new Date(date.toString().replace(pattern, '$1-$2-$3'))));\n                    $scope.monthlyCals.push(response[i].calories);\n                    $scope.monthlyTargetCals.push($scope.target);\n                }\n                \n                //if the entry is within the last 7 days\n                if(response[i].date + 100 > currentDate.yyyymmdd() - 7){\n                    $scope.dailyDates.push($filter('date')(new Date(date.toString().replace(pattern, '$1-$2-$3'))));\n                    $scope.dailyCals.push(response[i].calories);\n                    $scope.dailyTargetCals.push($scope.target);\n                }\n            }\n            \n            // finished data ready for the graphs\n            $scope.data = [$scope.cals, $scope.targetCals];\n            $scope.monthlyData = [$scope.monthlyCals, $scope.monthlyTargetCals];\n            $scope.dailyData = [$scope.dailyCals, $scope.dailyTargetCals];\n        }).\n        error(function (err) {\n            console.log(err);\n            $location.path('/account/diary');\n        }); \n    }\n    //get screen size so that i can change the chart type depending on the device size\n    var screenWidth = $(window).width();\n    //if the width is greater than 700\n    if (screenWidth > 700){\n        $scope.chartPolar = false;\n        $scope.chartLine = true;    \n    }else{\n        $scope.chartLine = false;\n        $scope.chartPolar = true;\n    }\n    \n    // graph settings\n    $scope.series = ['Calories', 'Goal Calorie Amount']; \n    $scope.options = {scales: {yAxes: [{id: 'y-axis-1', type: 'linear', display: true, position: 'left'}]}};\n    $scope.colors = ['#3f51b5','#4caf50'],\n    $scope.onClick = function (points, evt) {\n        console.log(points, evt);\n    };\n});","app.controller('QuickAddController', function ($scope, $http, $route, chosenMeal) {\n    //add cals sends the selected data to the server to then be added to the users food data for that day in the database\n    $scope.addCals = function () {\n        console.log(chosenMeal + \" : \" + $scope.cals);\n        //create an object holding all the information\n        var diaryEntry = {[chosenMeal]: [{\"name\": \"Quick Add\",\"calories\": $scope.cals, \"servings\": 1,\"nutrients\": {\"fat\": 0,\"carbs\": 0,\"protein\": 0}}]};\n        //use a post method to send the data to the server\n        $http({\n            method: 'POST',\n            url: '/account/diary',\n            data: diaryEntry\n        }).\n        success(function (response) {\n            $route.reload();\n        }).\n        error(function (err) {\n            console.log(err);\n        });\n    };\n});","//Text search controller\napp.controller('TextSearchController', function ($scope, $location, $http, Meal, ModalService) {\n    //assign the value from the factory giving the meal type\n    var selectedMeal = {meal: Meal.Meal};\n    $scope.meal = selectedMeal.meal;\n    \n    //get the custome meal items from the server\n    $scope.getCustoms = function() {\n        //send get request to get the custom items for the users\n        $http({\n            method: 'GET',\n            url: '/account/custom',\n        }).//when a success has been called\n        success(function (response) { \n            //empty array that will hold the meal key values\n            $scope.keys = [];\n            $scope.customMeals = response[0].customs;\n            //loop over the meals\n            for(var i = 0;i<$scope.customMeals.length;i++){\n                //push the key values to the key array\n                $scope.keys.push(Object.keys($scope.customMeals[i]));\n            }\n        }).\n        error(function (response) {\n            console.log(response);\n        });\n    }\n    \n    //function that will add the data from a users custom meal\n    $scope.addCustom = function(custommeal,key) {\n        //loop over the custom meal and send each item to the server\n        for(var i=0;i<custommeal[key].length;i++){\n        //use a post method to send the data to the server\n            $http({\n                method: 'POST',\n                url: '/account/diary',\n                data: {[$scope.meal]:custommeal[key][i]}\n            }).\n            success(function (response) {\n                console.log(response);\n            }).\n            error(function (err) {\n                console.log(err);\n            });            \n        }//when done redirect to the diary page\n        $location.path('/account/diary');\n    }\n    \n    //get the users most popular items for the selected meal from the server\n    $scope.getPopular = function(){\n        //send get request to get the most pupular items for the users\n        $http({\n            method: 'POST',\n            url: '/account/textsearch',\n            data: selectedMeal,\n        }).//on success assign the data to the pop variable\n        success(function (response) {\n            $scope.popular = response;\n        }).\n        error(function (response) {\n            $location.path('/account/diary');\n        });\n    }\n    //if the meal variable is empty redirect to the diary page\n    if($scope.meal == \"\"){\n       $location.path('/account/diary');\n    }\n    else{//call the functions to get the popular and custom items\n        $scope.getCustoms();\n        $scope.getPopular();\n    }\n    \n    //each key press triggers the searh function\n    $scope.foodTextSearch = function (search) {\n\n        //the if statement makes sure the ng change doesnt trigger a search with an empty string\n        if (search) {\n            //hide the most popular when there is a search \n            $scope.showPopular = false;\n            //api used for the search\n            var searchURL = \"https://uk.openfoodfacts.org/cgi/search.pl?search_terms=\" + search + \"&search_simple=1&json=1\";\n            //http request to fetch the data\n            $http({\n                method: 'GET',\n                url: searchURL,\n                dataType: \"json\"\n            }).\n            success(function (response) {\n                $scope.results = [];\n                // only pushes the item to the array variable if the information about it is complete\n                for(var i=0;i<response.products.length;i++){\n                    if(response.products[i].complete == 1){\n                        $scope.results.push(response.products[i]);\n                       }\n                }\n            }).\n            error(function (response) {\n                console.log(\"err \" + response);\n            });\n        }\n    }\n    \n    //function called to add the selected food\n    $scope.foodInformation = function (food) {\n        //modal is called in a separate controller\n        ModalService.showModal({\n            templateUrl: './views/addfood.html',\n            controller: 'AddFoodController',\n            // two variables are sent to the controller \n            inputs: {\n                food: food,\n                meal: selectedMeal.meal\n            }\n        }).then(function (modal) {\n            modal.element.modal();\n        });\n    };\n    \n});"]}